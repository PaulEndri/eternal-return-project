"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationScraper = void 0;
/**
 * @packageDocumentation
 * @module WikiData
 * */
const generic_1 = require("../api/generic");
const constants_1 = require("../utils/constants");
const core_1 = require("./core");
class LocationScraper extends core_1.CoreScraper {
    constructor(cache) {
        super(cache);
        this.genericApi = new generic_1.GenericApi();
    }
    async getLocation({ name, href }, full = false) {
        const cachedValue = await this.cache.get(name);
        if (cachedValue) {
            return cachedValue;
        }
        const $ = await this.getPage(href);
        const materials = $('#mw-content-text > div > table:nth-child(5) > tbody')
            .find('tr')
            .toArray()
            .map((row) => {
            const $row = $(row);
            const item = this.getSimpleElement($, $row.find('td a'));
            const quantity = $row.find('td:nth-child(2)').text().trim();
            return [item.name, { ...item, quantity }];
        })
            .filter((arr) => arr[0] && arr[0] !== 'undefined');
        let drops;
        if (full) {
            try {
                drops = await this.genericApi.getItemsForArea(name);
            }
            catch (e) {
                console.error(e);
            }
        }
        const animals = $('#Animals')
            .parent()
            .nextUntil('table')
            .next()
            .find('tr')
            .toArray()
            .map((el) => {
            const $el = $(el);
            const animal = {
                name: $el.find('a').attr('title'),
                href: $el.find('a').attr('href'),
                quantity: $el.find('td:nth-child(2)').text().trim()
            };
            return [animal.name, animal];
        })
            .filter((arr) => arr[0] && arr[0] !== 'undefined');
        return {
            name,
            href,
            drops,
            animals: Object.fromEntries(animals),
            materials: Object.fromEntries(materials),
            teleport: constants_1.TeleportLocations.includes(name),
            connections: constants_1.LocationConnections[name]
        };
    }
    async getAll(full = false) {
        const $ = await this.getPage(constants_1.MAP_PATH);
        const locationPromises = $('#mw-content-text > div > ul a')
            .toArray()
            .map((el) => this.getSimpleElement($, el))
            .map((el) => this.getLocation(el, full));
        const locations = await Promise.all(locationPromises);
        return Object.fromEntries(locations.map((loc) => [loc.name, loc]));
    }
}
exports.LocationScraper = LocationScraper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmFwZXJzL2xvY2F0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0tBR0s7QUFDTCw0Q0FBNEM7QUFFNUMsa0RBQXNGO0FBQ3RGLGlDQUFxQztBQUVyQyxNQUFhLGVBQWdCLFNBQVEsa0JBQVc7SUFHL0MsWUFBWSxLQUFNO1FBQ2pCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUViLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxvQkFBVSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFZLEVBQUUsSUFBSSxHQUFHLEtBQUs7UUFDOUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxJQUFJLFdBQVcsRUFBRTtZQUNoQixPQUFPLFdBQVcsQ0FBQztTQUNuQjtRQUNELE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMscURBQXFELENBQUM7YUFDeEUsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLE9BQU8sRUFBRTthQUNULEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ1osTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZ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QUM7SUFDdEUsQ0FBQztDQUNEO0FBOUVELDBDQThFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICogQG1vZHVsZSBXaWtpRGF0YVxyXG4gKiAqL1xyXG5pbXBvcnQgeyBHZW5lcmljQXBpIH0gZnJvbSAnLi4vYXBpL2dlbmVyaWMnO1xyXG5pbXBvcnQgeyBJRWxlbWVudCB9IGZyb20gJy4uL2ludGVyZmFjZXMvSUVsZW1lbnQnO1xyXG5pbXBvcnQgeyBMb2NhdGlvbkNvbm5lY3Rpb25zLCBNQVBfUEFUSCwgVGVsZXBvcnRMb2NhdGlvbnMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBDb3JlU2NyYXBlciB9IGZyb20gJy4vY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9jYXRpb25TY3JhcGVyIGV4dGVuZHMgQ29yZVNjcmFwZXIge1xyXG5cdHByaXZhdGUgZ2VuZXJpY0FwaTogR2VuZXJpY0FwaTtcclxuXHJcblx0Y29uc3RydWN0b3IoY2FjaGU/KSB7XHJcblx0XHRzdXBlcihjYWNoZSk7XHJcblxyXG5cdFx0dGhpcy5nZW5lcmljQXBpID0gbmV3IEdlbmVyaWNBcGkoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBhc3luYyBnZXRMb2NhdGlvbih7IG5hbWUsIGhyZWYgfTogSUVsZW1lbnQsIGZ1bGwgPSBmYWxzZSkge1xyXG5cdFx0Y29uc3QgY2FjaGVkVmFsdWUgPSBhd2FpdCB0aGlzLmNhY2hlLmdldChuYW1lKTtcclxuXHRcdGlmIChjYWNoZWRWYWx1ZSkge1xyXG5cdFx0XHRyZXR1cm4gY2FjaGVkVmFsdWU7XHJcblx0XHR9XHJcblx0XHRjb25zdCAkID0gYXdhaXQgdGhpcy5nZXRQYWdlKGhyZWYpO1xyXG5cdFx0Y29uc3QgbWF0ZXJpYWxzID0gJCgnI213LWNvbnRlbnQtdGV4dCA+IGRpdiA+IHRhYmxlOm50aC1jaGlsZCg1KSA+IHRib2R5JylcclxuXHRcdFx0LmZpbmQoJ3RyJylcclxuXHRcdFx0LnRvQXJyYXkoKVxyXG5cdFx0XHQubWFwKChyb3cpID0+IHtcclxuXHRcdFx0XHRjb25zdCAkcm93ID0gJChyb3cpO1xyXG5cdFx0XHRcdGNvbnN0IGl0ZW0gPSB0aGlzLmdldFNpbXBsZUVsZW1lbnQoJCwgJHJvdy5maW5kKCd0ZCBhJykpO1xyXG5cdFx0XHRcdGNvbnN0IHF1YW50aXR5ID0gJHJvdy5maW5kKCd0ZDpudGgtY2hpbGQoMiknKS50ZXh0KCkudHJpbSgpO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gWyBpdGVtLm5hbWUsIHsgLi4uaXRlbSwgcXVhbnRpdHkgfSBdO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuZmlsdGVyKChhcnIpID0+IGFyclswXSAmJiBhcnJbMF0gIT09ICd1bmRlZmluZWQnKTtcclxuXHJcblx0XHRsZXQgZHJvcHM7XHJcblxyXG5cdFx0aWYgKGZ1bGwpIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRkcm9wcyA9IGF3YWl0IHRoaXMuZ2VuZXJpY0FwaS5nZXRJdGVtc0ZvckFyZWEobmFtZSk7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYW5pbWFscyA9ICQoJyNBbmltYWxzJylcclxuXHRcdFx0LnBhcmVudCgpXHJcblx0XHRcdC5uZXh0VW50aWwoJ3RhYmxlJylcclxuXHRcdFx0Lm5leHQoKVxyXG5cdFx0XHQuZmluZCgndHInKVxyXG5cdFx0XHQudG9BcnJheSgpXHJcblx0XHRcdC5tYXAoKGVsKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgJGVsID0gJChlbCk7XHJcblx0XHRcdFx0Y29uc3QgYW5pbWFsID0ge1xyXG5cdFx0XHRcdFx0bmFtZTogJGVsLmZpbmQoJ2EnKS5hdHRyKCd0aXRsZScpLFxyXG5cdFx0XHRcdFx0aHJlZjogJGVsLmZpbmQoJ2EnKS5hdHRyKCdocmVmJyksXHJcblx0XHRcdFx0XHRxdWFudGl0eTogJGVsLmZpbmQoJ3RkOm50aC1jaGlsZCgyKScpLnRleHQoKS50cmltKClcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gWyBhbmltYWwubmFtZSwgYW5pbWFsIF07XHJcblx0XHRcdH0pXHJcblx0XHRcdC5maWx0ZXIoKGFycikgPT4gYXJyWzBdICYmIGFyclswXSAhPT0gJ3VuZGVmaW5lZCcpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG5hbWUsXHJcblx0XHRcdGhyZWYsXHJcblx0XHRcdGRyb3BzLFxyXG5cdFx0XHRhbmltYWxzOiBPYmplY3QuZnJvbUVudHJpZXMoYW5pbWFscyksXHJcblx0XHRcdG1hdGVyaWFsczogT2JqZWN0LmZyb21FbnRyaWVzKG1hdGVyaWFscyksXHJcblx0XHRcdHRlbGVwb3J0OiBUZWxlcG9ydExvY2F0aW9ucy5pbmNsdWRlcyhuYW1lKSxcclxuXHRcdFx0Y29ubmVjdGlvbnM6IExvY2F0aW9uQ29ubmVjdGlvbnNbbmFtZV1cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgYXN5bmMgZ2V0QWxsKGZ1bGwgPSBmYWxzZSkge1xyXG5cdFx0Y29uc3QgJCA9IGF3YWl0IHRoaXMuZ2V0UGFnZShNQVBfUEFUSCk7XHJcblxyXG5cdFx0Y29uc3QgbG9jYXRpb25Qcm9taXNlczogUHJvbWlzZTxhbnk+W10gPSAkKCcjbXctY29udGVudC10ZXh0ID4gZGl2ID4gdWwgYScpXHJcblx0XHRcdC50b0FycmF5KClcclxuXHRcdFx0Lm1hcCgoZWwpID0+IHRoaXMuZ2V0U2ltcGxlRWxlbWVudCgkLCBlbCkpXHJcblx0XHRcdC5tYXAoKGVsKSA9PiB0aGlzLmdldExvY2F0aW9uKGVsLCBmdWxsKSk7XHJcblxyXG5cdFx0Y29uc3QgbG9jYXRpb25zID0gYXdhaXQgUHJvbWlzZS5hbGwobG9jYXRpb25Qcm9taXNlcyk7XHJcblxyXG5cdFx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhsb2NhdGlvbnMubWFwKChsb2MpID0+IFsgbG9jLm5hbWUsIGxvYyBdKSk7XHJcblx0fVxyXG59XHJcbiJdfQ==