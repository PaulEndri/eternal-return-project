"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimalScraper = void 0;
const constants_1 = require("../utils/constants");
const core_1 = require("./core");
class AnimalScraper extends core_1.CoreScraper {
    constructor() {
        super(...arguments);
        this.getAnimal = async ({ name, href }) => {
            const cachedValue = await this.cache.get(name);
            if (cachedValue) {
                return cachedValue;
            }
            const $ = await this.getPage(href);
            const locations = $('#mw-content-text > div > table:nth-child(6) > tbody')
                .find('tr')
                .toArray()
                .map((el) => {
                const location = this.getSimpleElement($, $(el).find('td a'));
                const quantity = $(el).find('td:nth-child(2)').text().trim();
                return [location.name, quantity];
            })
                .filter((arr) => arr[0] && arr[0] !== 'undefined');
            const drops = $('#mw-content-text > div > table:nth-child(9) > tbody')
                .find('tr')
                .toArray()
                .map((el) => {
                const item = this.getSimpleElement($, $(el).find('td a'));
                const rarity = $(el).find('td:nth-child(2)').text().trim();
                const percentage = $(el).find('td:nth-child(3)').text().trim();
                return [item.name, { name: item.name, rarity, percentage }];
            })
                .filter((arr) => arr[0] && arr[0] !== 'undefined');
            return {
                name,
                href,
                locations: Object.fromEntries(locations),
                items: Object.fromEntries(drops)
            };
        };
        this.getAll = async () => {
            const $ = await this.getPage(constants_1.ANIMAL_PATH);
            console.log('[test]', $);
            const animalPromises = $('#mw-content-text > div > ul a')
                .toArray()
                .map((el) => this.getSimpleElement($, el))
                .map((el) => this.getAnimal(el));
            const animals = await Promise.all(animalPromises);
            return Object.fromEntries(animals.map((anim) => [anim.name, anim]));
        };
    }
}
exports.AnimalScraper = AnimalScraper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9hbmltYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU1BLGtEQUFpRDtBQUNqRCxpQ0FBcUM7QUFFckMsTUFBYSxhQUFjLFNBQVEsa0JBQVc7SUFBOUM7O1FBQ1EsY0FBUyxHQUFHLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQVksRUFBRSxFQUFFO1lBQ3JELE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQVUsSUFBSSxDQUFDLENBQUM7WUFDeEQsSUFBSSxXQUFXLEVBQUU7Z0JBQ2hCLE9BQU8sV0FBVyxDQUFDO2FBQ25CO1lBRUQsTUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxxREFBcUQsQ0FBQztpQkFDeEUsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDVixPQUFPLEVBQUU7aUJBQ1QsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7Z0JBQ1gsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQzlELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFFN0QsT0FBTyxDQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFFLENBQUM7WUFDcEMsQ0FBQyxDQUFDO2lCQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQztZQUVwRCxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMscURBQXFELENBQUM7aUJBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ1YsT0FBTyxFQUFFO2lCQUNULEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO2dCQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUMxRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzNELE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFFL0QsT0FBTyxDQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUUsQ0FBQztZQUMvRCxDQUFDLENBQUM7aUJBQ0QsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDO1lBRXBELE9BQU87Z0JBQ04sSUFBSTtnQkFDSixJQUFJO2dCQUNKLFNBQVMsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQztnQkFDeEMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO2FBQ3JCLENBQUM7UUFDZCxDQUFDLENBQUM7UUFFSyxXQUFNLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUFXLENBQUMsQ0FBQztZQUUxQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLGNBQWMsR0FBbUIsQ0FBQyxDQUFDLCtCQUErQixDQUFDO2lCQUN2RSxPQUFPLEVBQUU7aUJBQ1QsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN6QyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVsQyxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFbEQsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFVLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEYsQ0FBQyxDQUFDO0lBQ0gsQ0FBQztDQUFBO0FBcERELHNDQW9EQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICogQG1vZHVsZSBXaWtpRGF0YVxyXG4gKiAqL1xyXG5pbXBvcnQgeyBJQW5pbWFsIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JQW5pbWFsJztcclxuaW1wb3J0IHsgSUVsZW1lbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lFbGVtZW50JztcclxuaW1wb3J0IHsgQU5JTUFMX1BBVEggfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBDb3JlU2NyYXBlciB9IGZyb20gJy4vY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQW5pbWFsU2NyYXBlciBleHRlbmRzIENvcmVTY3JhcGVyIHtcclxuXHRwdWJsaWMgZ2V0QW5pbWFsID0gYXN5bmMgKHsgbmFtZSwgaHJlZiB9OiBJRWxlbWVudCkgPT4ge1xyXG5cdFx0Y29uc3QgY2FjaGVkVmFsdWUgPSBhd2FpdCB0aGlzLmNhY2hlLmdldDxJQW5pbWFsPihuYW1lKTtcclxuXHRcdGlmIChjYWNoZWRWYWx1ZSkge1xyXG5cdFx0XHRyZXR1cm4gY2FjaGVkVmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgJCA9IGF3YWl0IHRoaXMuZ2V0UGFnZShocmVmKTtcclxuXHRcdGNvbnN0IGxvY2F0aW9ucyA9ICQoJyNtdy1jb250ZW50LXRleHQgPiBkaXYgPiB0YWJsZTpudGgtY2hpbGQoNikgPiB0Ym9keScpXHJcblx0XHRcdC5maW5kKCd0cicpXHJcblx0XHRcdC50b0FycmF5KClcclxuXHRcdFx0Lm1hcCgoZWwpID0+IHtcclxuXHRcdFx0XHRjb25zdCBsb2NhdGlvbiA9IHRoaXMuZ2V0U2ltcGxlRWxlbWVudCgkLCAkKGVsKS5maW5kKCd0ZCBhJykpO1xyXG5cdFx0XHRcdGNvbnN0IHF1YW50aXR5ID0gJChlbCkuZmluZCgndGQ6bnRoLWNoaWxkKDIpJykudGV4dCgpLnRyaW0oKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIFsgbG9jYXRpb24ubmFtZSwgcXVhbnRpdHkgXTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LmZpbHRlcigoYXJyKSA9PiBhcnJbMF0gJiYgYXJyWzBdICE9PSAndW5kZWZpbmVkJyk7XHJcblxyXG5cdFx0Y29uc3QgZHJvcHMgPSAkKCcjbXctY29udGVudC10ZXh0ID4gZGl2ID4gdGFibGU6bnRoLWNoaWxkKDkpID4gdGJvZHknKVxyXG5cdFx0XHQuZmluZCgndHInKVxyXG5cdFx0XHQudG9BcnJheSgpXHJcblx0XHRcdC5tYXAoKGVsKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuZ2V0U2ltcGxlRWxlbWVudCgkLCAkKGVsKS5maW5kKCd0ZCBhJykpO1xyXG5cdFx0XHRcdGNvbnN0IHJhcml0eSA9ICQoZWwpLmZpbmQoJ3RkOm50aC1jaGlsZCgyKScpLnRleHQoKS50cmltKCk7XHJcblx0XHRcdFx0Y29uc3QgcGVyY2VudGFnZSA9ICQoZWwpLmZpbmQoJ3RkOm50aC1jaGlsZCgzKScpLnRleHQoKS50cmltKCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBbIGl0ZW0ubmFtZSwgeyBuYW1lOiBpdGVtLm5hbWUsIHJhcml0eSwgcGVyY2VudGFnZSB9IF07XHJcblx0XHRcdH0pXHJcblx0XHRcdC5maWx0ZXIoKGFycikgPT4gYXJyWzBdICYmIGFyclswXSAhPT0gJ3VuZGVmaW5lZCcpO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG5hbWUsXHJcblx0XHRcdGhyZWYsXHJcblx0XHRcdGxvY2F0aW9uczogT2JqZWN0LmZyb21FbnRyaWVzKGxvY2F0aW9ucyksXHJcblx0XHRcdGl0ZW1zOiBPYmplY3QuZnJvbUVudHJpZXMoZHJvcHMpXHJcblx0XHR9IGFzIElBbmltYWw7XHJcblx0fTtcclxuXHJcblx0cHVibGljIGdldEFsbCA9IGFzeW5jICgpID0+IHtcclxuXHRcdGNvbnN0ICQgPSBhd2FpdCB0aGlzLmdldFBhZ2UoQU5JTUFMX1BBVEgpO1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKCdbdGVzdF0nLCAkKTtcclxuXHRcdGNvbnN0IGFuaW1hbFByb21pc2VzOiBQcm9taXNlPGFueT5bXSA9ICQoJyNtdy1jb250ZW50LXRleHQgPiBkaXYgPiB1bCBhJylcclxuXHRcdFx0LnRvQXJyYXkoKVxyXG5cdFx0XHQubWFwKChlbCkgPT4gdGhpcy5nZXRTaW1wbGVFbGVtZW50KCQsIGVsKSlcclxuXHRcdFx0Lm1hcCgoZWwpID0+IHRoaXMuZ2V0QW5pbWFsKGVsKSk7XHJcblxyXG5cdFx0Y29uc3QgYW5pbWFscyA9IGF3YWl0IFByb21pc2UuYWxsKGFuaW1hbFByb21pc2VzKTtcclxuXHJcblx0XHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzPElBbmltYWw+KGFuaW1hbHMubWFwKChhbmltKSA9PiBbIGFuaW0ubmFtZSwgYW5pbSBdKSk7XHJcblx0fTtcclxufVxyXG4iXX0=